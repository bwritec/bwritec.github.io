//
// Mixins.less.
// Trechos de CSS reutilizáveis para desenvolver mais
// rapidamente e manter o código legível.
//

//
// UTILITÁRIOS MIXINS.
//

//
// Clearfix.
//
// Para limpar floats h5bp.com/q.
//
.clearfix
{
    &:before,
    &:after
    {
        display: table;
        content: "";
    }

    &:after
    {
        clear: both;
    }
}

//
// Focus estilo Webkit.
//
.tab-focus()
{
    //
    // Padrão.
    //
    outline: thin dotted #333;

    //
    // Webkit.
    //
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

//
// Alinhe centralmente um elemento de nível de bloco.
//
.center-block()
{
    margin-right: auto;
    margin-left: auto;
    display: block;
}

//
// IE7 inline-block.
//
.ie7-inline-block()
{
}

//
// O IE7 gosta de recolher os espaços em branco em ambos os
// lados dos elementos inline-block. Ems porque estamos
// tentando corresponder à largura de um caractere de espaço.
// A versão esquerda é para botões de formulário, que
// normalmente vêm depois de outros elementos, e a versão
// direita é para ícones, que vêm antes. Aplicar ambos está
// ok, mas significa que o espaço entre esses elementos será
// .6em (~2 caracteres de espaço) no IE7, em vez de 1 espaço
// em outros navegadores.
//
.ie7-restore-left-whitespace()
{
    &:first-child
    {
    }
}

.ie7-restore-right-whitespace()
{
    &:last-child
    {
    }
}

//
// Tamanhos shortcuts.
//
.size(@height: 5px, @width: 5px)
{
    height: @height;
    width: @width;
}

.square(@size: 5px)
{
    .size(@size, @size);
}

//
// Placeholder do texto.
//
.placeholder(@color: @placeholderText)
{
    :-moz-placeholder
    {
        color: @color;
    }

    ::-webkit-input-placeholder
    {
        color: @color;
    }
}

//
// Overflow de texto.
//
// Requer block ou inline-block para um estilo adequado.
//
.text-overflow()
{
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

//
// Nova substituição de imagem.
//
.hide-text
{
    white-space: nowrap;
    text-indent: 100%;
    overflow: hidden;
}

//
// FONTS.
//

#font
{
    #family
    {
        .serif()
        {
            font-family: Georgia, "Times New Roman", Times, serif;
        }

        .sans-serif()
        {
            font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        }

        .monospace()
        {
            font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        }
    }

    .shorthand(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight)
    {
        line-height: @lineHeight;
        font-weight: @weight;
        font-size: @size;
    }

    .serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight)
    {
        #font > #family > .serif;
        #font > .shorthand(@size, @weight, @lineHeight);
    }

    .sans-serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight)
    {
        #font > #family > .sans-serif;
        #font > .shorthand(@size, @weight, @lineHeight);
    }

    .monospace(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight)
    {
        #font > #family > .monospace;
        #font > .shorthand(@size, @weight, @lineHeight);
    }
}

//
// FORMS.
//

//
// Entradas de nível de bloco.
//
.input-block-level
{
    min-height: 28px;
    display: block;
    width: 100%;

    .box-sizing(border-box);
}

//
// Mixin para estados de campos de formulário.
//
.formFieldState(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5)
{
    //
    // Defina a cor do texto.
    //
    > label,
    .help-block,
    .help-inline
    {
        color: @textColor;
    }

    //
    // Estilize as entradas de acordo.
    //
    input,
    select,
    textarea
    {
        border-color: @borderColor;
        color: @textColor;

        &:focus
        {
            border-color: darken(@borderColor, 10%);

            .box-shadow(0 0 6px lighten(@borderColor, 20%));
        }
    }

    //
    // Dê uma pequena cor de fundo para input-prepend/-append.
    //
    .input-prepend .add-on,
    .input-append .add-on
    {
        background-color: @backgroundColor;
        border-color: @textColor;
        color: @textColor;
    }
}

//
// PROPRIEDADES CSS3.
//

//
// Border Radius.
//
.border-radius(@radius: 5px)
{
    -webkit-border-radius: @radius;
       -moz-border-radius: @radius;
            border-radius: @radius;
}

//
// Drop shadows.
//
.box-shadow(@shadow: 0 1px 3px rgba(0, 0, 0, .25))
{
    -webkit-box-shadow: @shadow;
       -moz-box-shadow: @shadow;
            box-shadow: @shadow;
}

//
// Transitions.
//
.transition(@transition)
{
    -webkit-transition: @transition;
       -moz-transition: @transition;
            transition: @transition;
}

//
// Transformations.
//
.rotate(@degrees)
{
    -webkit-transform: rotate(@degrees);
       -moz-transform: rotate(@degrees);
            transform: rotate(@degrees);
}

.scale(@ratio)
{
    -webkit-transform: scale(@ratio);
       -moz-transform: scale(@ratio);
            transform: scale(@ratio);
}

.translate(@x: 0, @y: 0)
{
    -webkit-transform: translate(@x, @y);
       -moz-transform: translate(@x, @y);
            transform: translate(@x, @y);
}

.skew(@x: 0, @y: 0)
{
    -webkit-transform: skew(@x, @y);
       -moz-transform: skew(@x, @y);
            transform: skew(@x, @y);
}

.translate3d(@x: 0, @y: 0, @z: 0)
{
    -webkit-transform: translate(@x, @y, @z);
       -moz-transform: translate(@x, @y, @z);
            transform: translate(@x, @y, @z);
}

//
// Background clipping.
// Atenção: FF 3.6 e abaixo tem necessidade de "padding" em
// vez de "padding-box".
//
.background-clip(@clip)
{
    -webkit-background-clip: @clip;
       -moz-background-clip: @clip;
            background-clip: @clip;
}

//
// Background sizing.
//
.background-size(@size)
{
    -webkit-background-size: @size;
       -moz-background-size: @size;
            background-size: @size;
}

//
// Box sizing.
//
.box-sizing(@boxmodel)
{
    -webkit-box-sizing: @boxmodel;
       -moz-box-sizing: @boxmodel;
            box-sizing: @boxmodel;
}

//
// User select.
// Para selecionar texto na página.
//
.user-select(@select)
{
    -webkit-user-select: @select;
       -moz-user-select: @select;
            user-select: @select;
}

//
// Redimensione qualquer coisa.
//
.resizable(@direction: both)
{
    //
    // Opções: horizontal, vertical, both.
    //
    resize: @direction;

    //
    // Correção Safari.
    //
    overflow: auto;
}

//
// Colunas de conteúdo CSS3.
//
.content-columns(@columnCount, @columnGap: @gridColumnGutter)
{
    -webkit-column-count: @columnCount;
       -moz-column-count: @columnCount;
            column-count: @columnCount;

    -webkit-column-gap: @columnGap;
       -moz-column-gap: @columnGap;
            column-gap: @columnGap;
}

//
// Opacidade.
//
.opacity(@opacity: 100)
{
    opacity: @opacity / 100;
}

//
// BACKGROUNDS.
//

//
// Adicione um valor de transparência alfa a qualquer cor
// de fundo ou borda.
//
#translucent
{
    .background(@color: @white, @alpha: 1)
    {
        background-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
    }

    .border(@color: @white, @alpha: 1)
    {
        border-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);

        .background-clip(padding-box);
    }
}

//
// Cores da barra gradiente para botões e alertas.
//
.gradientBar(@primaryColor, @secondaryColor)
{
    #gradient > .vertical(@primaryColor, @secondaryColor);

    border-color: @secondaryColor @secondaryColor darken(@secondaryColor, 15%);
    border-color: rgba(0, 0, 0, .1) rgba(0, 0, 0, .1) fadein(rgba(0, 0, 0, .1), 15%);
}

//
// Gradients.
//
#gradient
{
    .horizontal(@startColor: #555, @endColor: #333)
    {
        background-color: @endColor;
        background-repeat: repeat-x;
        background-image: -webkit-linear-gradient(left, @startColor, @endColor);
        background-image:    -moz-linear-gradient(left, @startColor, @endColor);
        background-image:         linear-gradient(left, @startColor, @endColor);
    }

    .vertical(@startColor: #555, @endColor: #333)
    {
        background-repeat: repeat-x;
        background-color: mix(@startColor, @endColor, 60%);
        background-image: -webkit-linear-gradient(top, @startColor, @endColor);
        background-image:    -moz-linear-gradient(top, @startColor, @endColor);
        background-image:         linear-gradient(top, @startColor, @endColor);
    }

    .directional(@startColor: #555, @endColor: #333, @deg: 45deg)
    {
        background-color: @endColor;
        background-repeat: repeat-x;
        background-image: -webkit-linear-gradient(@deg, @startColor, @endColor);
        background-image:    -moz-linear-gradient(@deg, @startColor, @endColor);
        background-image:         linear-gradient(@deg, @startColor, @endColor);
    }

    .vertical-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f)
    {
        background-repeat: no-repeat;
        background-color: mix(@midColor, @endColor, 80%);
        background-image: -webkit-linear-gradient(@startColor, @midColor @colorStop, @endColor);
        background-image:    -moz-linear-gradient(@startColor, @midColor @colorStop, @endColor);
        background-image:         linear-gradient(@startColor, @midColor @colorStop, @endColor);
    }

    .radial(@innerColor: #555, @outerColor: #333)
    {
        background-repeat: no-repeat;
        background-color: @outerColor;
        background-image: -webkit-radial-gradient(circle, @innerColor, @outerColor);
        background-image:    -moz-radial-gradient(circle, @innerColor, @outerColor);
        background-image:         radial-gradient(circle, @innerColor, @outerColor);
    }

    .striped(@color, @angle: -45deg)
    {
        background-color: @color;
        background-image: -webkit-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image:    -moz-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image:         linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    }
}

//
// Redefinir filtros para IE.
//
.reset-filter()
{
}

//
// MIXINS DE COMPONENTES.
//

//
// Horizontal dividers.
//
// Divisores (basicamente um hr) em menus dropdowns
// e listas de navegação.
//
.nav-divider()
{
    margin: ((@baseLineHeight / 2) - 1) 1px;
    border-bottom: 1px solid @white;
    background-color: #e5e5e5;
    overflow: hidden;
    height: 1px;
}

//
// Backgrounds de botão.
//
.buttonBackground(@startColor, @endColor)
{
    //
    // gradientBar irá definir o plano de fundo para uma
    // mistura agradável destes, para suportar o IE<=9.
    //
    .gradientBar(@startColor, @endColor);
    .reset-filter();

    //
    // Nesses casos, o gradiente não cobrirá o fundo,
    // então substituímos.
    //
    &:hover,
    &:active,
    &.active,
    &.disabled,
    &[disabled]
    {
        background-color: @endColor;
    }

    //
    // O IE 7 + 8 não consegue lidar com box-shadow para
    // mostrar ativo, então nós mesmos escurecemos um
    // pouco.
    //
    &:active,
    &.active
    {
        background-color: darken(@endColor, 10%) e("\9");
    }
}

//
// Alinhamento vertical da navbar.
//
// Centralize verticalmente os elementos na navbar.
// Exemplo: um elemento tem uma altura de 30px, então
// escreva `.navbarVerticalAlign(30px);` para calcular
// a margem mais alta de forma apropriada.
//
.navbarVerticalAlign(@elementHeight)
{
    margin-top: (@navbarHeight - @elementHeight) / 2;
}

//
// Popover arrows.
//
// Para tipsies e popovers.
//
#popoverArrow
{
    .top(@arrowWidth: 5px, @color: @black)
    {
        border-right: @arrowWidth solid transparent;
        border-left: @arrowWidth solid transparent;
        border-top: @arrowWidth solid @color;
        margin-left: -@arrowWidth;
        bottom: 0;
        left: 50%;
    }

    .left(@arrowWidth: 5px, @color: @black)
    {
        border-bottom: @arrowWidth solid transparent;
        border-top: @arrowWidth solid transparent;
        border-left: @arrowWidth solid @color;
        margin-top: -@arrowWidth;
        right: 0;
        top: 50%;
    }

    .bottom(@arrowWidth: 5px, @color: @black)
    {
        border-right: @arrowWidth solid transparent;
        border-left: @arrowWidth solid transparent;
        border-bottom: @arrowWidth solid @color;
        margin-left: -@arrowWidth;
        left: 50%;
        top: 0;
    }

    .right(@arrowWidth: 5px, @color: @black)
    {
        border-bottom: @arrowWidth solid transparent;
        border-top: @arrowWidth solid transparent;
        border-right: @arrowWidth solid @color;
        margin-top: -@arrowWidth;
        top: 50%;
        left: 0;
    }
}

//
// Sistema de régua.
//

//
// Elemento de contêiner centralizado.
//
.container-fixed()
{
    margin-right: auto;
    margin-left: auto;

    .clearfix();
}

//
// Colunas da tabela.
//
.tableColumns(@columnSpan: 1)
{
    //
    // Desfazer estilos de coluna de régua padrão.
    //
    float: none;

    //
    // 16 é o preenchimento total à esquerda e à direita
    // das células da tabela.
    //
    width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWidth * (@columnSpan - 1)) - 16;

    //
    // Desfazer estilos de coluna de régua padrão.
    //
    margin-left: 0;
}

//
// Faça uma régua.
// Use .makeRow e .makeColumn para atribuir o comportamento
// do sistema de régua de layouts semânticos.
//
.makeRow()
{
    margin-left: @gridGutterWidth * -1;

    .clearfix();
}

.makeColumn(@columns: 1)
{
    width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
    margin-left: @gridGutterWidth;
    float: left;
}

//
// A régua.
//
#grid
{
    .core (@gridColumnWidth, @gridGutterWidth)
    {
        .spanX (@index) when (@index > 0)
        {
            (~".span@{index}")
            {
                .span(@index);
            }

            .spanX(@index - 1);
        }

        .spanX (0)
        {
        }

        .offsetX (@index) when (@index > 0)
        {
            (~".offset@{index}")
            {
                .offset(@index);
            }

            .offsetX(@index - 1);
        }

        .offsetX (0)
        {
        }

        .offset (@columns)
        {
            margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1)) + (@gridGutterWidth * 2);
        }

        .span (@columns)
        {
            width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
        }

        .row
        {
            margin-left: @gridGutterWidth * -1;

            .clearfix();
        }

        [class*="span"]
        {
            margin-left: @gridGutterWidth;
            float: left;
        }

        //
        // Defina a largura do contêiner e substitua-a por
        // navbars fixas em consultas de mídia.
        //
        .container,
        .navbar-fixed-top .container,
        .navbar-fixed-bottom .container
        {
            .span(@gridColumns);
        }

        //
        // Gerar .spanX e .offsetX.
        //
        .spanX (@gridColumns);
        .offsetX (@gridColumns);
    }

    .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth)
    {
        .spanX (@index) when (@index > 0)
        {
            (~"> .span@{index}")
            {
                .span(@index);
            }

            .spanX(@index - 1);
        }

        .spanX (0)
        {
        }

        .span (@columns)
        {
            width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
        }

        .row-fluid
        {
            width: 100%;

            .clearfix();

            > [class*="span"]
            {
                margin-left: @fluidGridGutterWidth;
                float: left;
            }

            > [class*="span"]:first-child
            {
                margin-left: 0;
            }

            //
            // Gerar .spanX.
            //
            .spanX (@gridColumns);
        }
    }

    .input(@gridColumnWidth, @gridGutterWidth)
    {
        .spanX (@index) when (@index > 0)
        {
            (~"input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index}")
            {
                .span(@index);
            }

            .spanX(@index - 1);
        }

        .spanX (0)
        {
        }

        .span(@columns)
        {
            width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 10;
        }

        input,
        textarea,
        .uneditable-input
        {
            //
            // Substituir a margem esquerda do sistema de régua
            // principal.
            //
            margin-left: 0;
        }

        //
        // Gerar .spanX.
        //
        .spanX (@gridColumns);
    }
}
